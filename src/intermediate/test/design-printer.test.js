import { vi, describe, beforeEach, test, toHaveBeenCalledWith, expect } from "vitest";
import { design_printer } from "../design-printer.js";


const logSpy  = vi.spyOn(console, 'log');

describe("Design printer test", () => {
    beforeEach(() => {
    	logSpy.mockRestore();
    })

    test("Prints one pattern only", () => {
	design_printer([["c", "h", "b"]])

	expect(logSpy).toHaveBeenCalledWith(".        .----------------------,      /|\n|\\      /                        \\   ,/`|\n| `-.  /__________________________`\\/   ;\n|    `\\(/||||||||||||||||||||||||\\,/    |\n|     /(                         /\\     |\n|    /  `\\                      /` \\,   |\n| ,-`     `---------------------`    \\, \\\n|/                                     \\`\n")
	expect(logSpy).toHaveBeenCalledWith("              ________\n           ./'       `\\\n         ,/       ,--; ;\n         ;        ;   \\;\n       ./          \\  `\n     ./_____________`\\\n,___/___________|_|___`.___..\n/____________________________\\\n")

	
	expect(logSpy).toHaveBeenCalledWith("    =/\\                 /\\=\n    / \\'._   (\\_/)   _.'/ \\\n   / .''._'--(o.o)--'_.''. \\\n  /.' _/ |`'=/ \" \\=\'`| \\_ `.\\\n /` .\' `\\;-,'\\___/',-;/` \'. \'\\\n/.-'       `\\(-V-)/`       `-.\\\n`            \"   \"\n")
    })


    test("Print multiple patterns", () => {
    	design_printer([["c", "c", "h", "b", "p"], ["p", "p", "p"]])
    
	expect(logSpy).toHaveBeenCalledWith(".        .----------------------,      /|\n|\\      /                        \\   ,/`|\n| `-.  /__________________________`\\/   ;\n|    `\\(/||||||||||||||||||||||||\\,/    |\n|     /(                         /\\     |\n|    /  `\\                      /` \\,   |\n| ,-`     `---------------------`    \\, \\\n|/                                     \\`\n")
	expect(logSpy).toHaveBeenCalledWith(".        .----------------------,      /|\n|\\      /                        \\   ,/`|\n| `-.  /__________________________`\\/   ;\n|    `\\(/||||||||||||||||||||||||\\,/    |\n|     /(                         /\\     |\n|    /  `\\                      /` \\,   |\n| ,-`     `---------------------`    \\, \\\n|/                                     \\`\n")
    
	expect(logSpy).toHaveBeenCalledWith("              ________\n           ./'       `\\\n         ,/       ,--; ;\n         ;        ;   \\;\n       ./          \\  `\n     ./_____________`\\\n,___/___________|_|___`.___..\n/____________________________\\\n")


	expect(logSpy).toHaveBeenCalledWith("    =/\\                 /\\=\n    / \\'._   (\\_/)   _.'/ \\\n   / .''._'--(o.o)--'_.''. \\\n  /.' _/ |`'=/ \" \\=\'`| \\_ `.\\\n /` .\' `\\;-,'\\___/',-;/` \'. \'\\\n/.-'       `\\(-V-)/`       `-.\\\n`            \"   \"\n")

	expect(logSpy).toHaveBeenCalledWith("\n ⢀⣀⣀⣀⣀⣀⣤⠴⢶⠇⠀⠀⣿⠤⣄⣀⣀⣀⣀⡀⠀⠀⠀⠀  \n⠀⠀⢀⡴⠞⠉⠁⢀⣠⡬⢿⡶⠛⠛⢲⣄⣤⣿⣶⠿⠯⣄⡀⠀⠉⠛⢦⡀⠀⠀   \n⢠⡏⠀⠀⢀⡞⠀⠀⠀⢸⠃⠀⠀⠀⢸⡇⠀⠀⠀⠈⣧⠀⠀⠀⢻⡄⠀⠀⠸⡆  \n⠈⣧⠀⠀⢻⠀⠀⠀⠀⣿⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⣸⠀⠀⠀⠀⡾⠀⠀⣰⠃\n⠀⠈⢷⡀⠈⢧⠀⠀⠀⢹⡀⠀⠀⠀⢸⡇⠀⠀⠀⠀⡟⠀⠀⠀⣸⠃⢀⡴⠃⠀\n⠀⠀⠀⠙⠳⢬⣳⣄⡀⠀⣧⠀⠀⠀⢸⡇⠀⠀⠀⣸⠃⠀⣠⣞⣥⠖⠋⠀⠀\n⠀⠀⠀⠀⠀⠀⠈⠉⠙⠲⠾⠷⠤⠤⠼⠧⣤⡤⠴⠧⠖⠛⠉⠁⠀⠀⠀\n")
        
	expect(logSpy).toHaveBeenCalledWith("\n ⢀⣀⣀⣀⣀⣀⣤⠴⢶⠇⠀⠀⣿⠤⣄⣀⣀⣀⣀⡀⠀⠀⠀⠀  \n⠀⠀⢀⡴⠞⠉⠁⢀⣠⡬⢿⡶⠛⠛⢲⣄⣤⣿⣶⠿⠯⣄⡀⠀⠉⠛⢦⡀⠀⠀   \n⢠⡏⠀⠀⢀⡞⠀⠀⠀⢸⠃⠀⠀⠀⢸⡇⠀⠀⠀⠈⣧⠀⠀⠀⢻⡄⠀⠀⠸⡆  \n⠈⣧⠀⠀⢻⠀⠀⠀⠀⣿⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⣸⠀⠀⠀⠀⡾⠀⠀⣰⠃\n⠀⠈⢷⡀⠈⢧⠀⠀⠀⢹⡀⠀⠀⠀⢸⡇⠀⠀⠀⠀⡟⠀⠀⠀⣸⠃⢀⡴⠃⠀\n⠀⠀⠀⠙⠳⢬⣳⣄⡀⠀⣧⠀⠀⠀⢸⡇⠀⠀⠀⣸⠃⠀⣠⣞⣥⠖⠋⠀⠀\n⠀⠀⠀⠀⠀⠀⠈⠉⠙⠲⠾⠷⠤⠤⠼⠧⣤⡤⠴⠧⠖⠛⠉⠁⠀⠀⠀\n")

	expect(logSpy).toHaveBeenCalledWith("\n ⢀⣀⣀⣀⣀⣀⣤⠴⢶⠇⠀⠀⣿⠤⣄⣀⣀⣀⣀⡀⠀⠀⠀⠀  \n⠀⠀⢀⡴⠞⠉⠁⢀⣠⡬⢿⡶⠛⠛⢲⣄⣤⣿⣶⠿⠯⣄⡀⠀⠉⠛⢦⡀⠀⠀   \n⢠⡏⠀⠀⢀⡞⠀⠀⠀⢸⠃⠀⠀⠀⢸⡇⠀⠀⠀⠈⣧⠀⠀⠀⢻⡄⠀⠀⠸⡆  \n⠈⣧⠀⠀⢻⠀⠀⠀⠀⣿⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⣸⠀⠀⠀⠀⡾⠀⠀⣰⠃\n⠀⠈⢷⡀⠈⢧⠀⠀⠀⢹⡀⠀⠀⠀⢸⡇⠀⠀⠀⠀⡟⠀⠀⠀⣸⠃⢀⡴⠃⠀\n⠀⠀⠀⠙⠳⢬⣳⣄⡀⠀⣧⠀⠀⠀⢸⡇⠀⠀⠀⣸⠃⠀⣠⣞⣥⠖⠋⠀⠀\n⠀⠀⠀⠀⠀⠀⠈⠉⠙⠲⠾⠷⠤⠤⠼⠧⣤⡤⠴⠧⠖⠛⠉⠁⠀⠀⠀\n")
        
	expect(logSpy).toHaveBeenCalledWith("\n ⢀⣀⣀⣀⣀⣀⣤⠴⢶⠇⠀⠀⣿⠤⣄⣀⣀⣀⣀⡀⠀⠀⠀⠀  \n⠀⠀⢀⡴⠞⠉⠁⢀⣠⡬⢿⡶⠛⠛⢲⣄⣤⣿⣶⠿⠯⣄⡀⠀⠉⠛⢦⡀⠀⠀   \n⢠⡏⠀⠀⢀⡞⠀⠀⠀⢸⠃⠀⠀⠀⢸⡇⠀⠀⠀⠈⣧⠀⠀⠀⢻⡄⠀⠀⠸⡆  \n⠈⣧⠀⠀⢻⠀⠀⠀⠀⣿⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⣸⠀⠀⠀⠀⡾⠀⠀⣰⠃\n⠀⠈⢷⡀⠈⢧⠀⠀⠀⢹⡀⠀⠀⠀⢸⡇⠀⠀⠀⠀⡟⠀⠀⠀⣸⠃⢀⡴⠃⠀\n⠀⠀⠀⠙⠳⢬⣳⣄⡀⠀⣧⠀⠀⠀⢸⡇⠀⠀⠀⣸⠃⠀⣠⣞⣥⠖⠋⠀⠀\n⠀⠀⠀⠀⠀⠀⠈⠉⠙⠲⠾⠷⠤⠤⠼⠧⣤⡤⠴⠧⠖⠛⠉⠁⠀⠀⠀\n")


    })
})
